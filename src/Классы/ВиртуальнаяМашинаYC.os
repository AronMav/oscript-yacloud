#Использовать "../internal"
#Использовать json
#Использовать logos

Перем Лог;
Перем ИмяВиртуальнойМашины;

Процедура ПриСозданииОбъекта(СтрокаИмяВиртуальнойМашины)
	ИмяВиртуальнойМашины = НРег(СтрокаИмяВиртуальнойМашины);
КонецПроцедуры

// Возвращиет наименование виртуальной машины
//
// Возвращаемое значение:
//   Строка	- Имя виртуальной машины
//
Функция Имя() Экспорт
	Возврат ИмяВиртуальнойМашины;
КонецФункции

// Выполняет создание виртуальной машины
//
// Параметры:
//	 ПараметрыМашины - Строка, Структура - Можно передать файл параметров
//	 или получить их использовав ВиртуальнаяМашинаYC.ПараметрыНовой()
//
// Возвращаемое значение:
//   Строка	- Свойства виртуальной машины
//
Функция Создать(Параметры) Экспорт
	Лог.Информация(СтрШаблон("Виртуальная машина %1 создается", ИмяВиртуальнойМашины));
	Команда = РаботаСКомандами.СформироватьКомандуСозданияВМ(ИмяВиртуальнойМашины, Параметры);
	КонтекстВыполнения = ИсполнительКоманд.ВыполнитьКоманду(Команда);
	ПарсерJSON = Новый ПарсерJSON();
	СтруктураПараметров = ПарсерJSON.ПрочитатьJSON(СокрЛП(КонтекстВыполнения), , , Истина);
	Лог.Информация(СтрШаблон("Виртуальная машина %1 создана", ИмяВиртуальнойМашины));
	Возврат СтруктураПараметров;
КонецФункции

// Выполняет запуск виртуальной машины
//
Процедура Запустить() Экспорт
	Лог.Информация(СтрШаблон("Виртуальная машина %1 запускается", ИмяВиртуальнойМашины));
	Команда = СтрШаблон("yc compute instance start %1 --no-user-output", ИмяВиртуальнойМашины);
	ИсполнительКоманд.ВыполнитьКоманду(Команда);
	Лог.Информация(СтрШаблон("Виртуальная машина %1 запущена", ИмяВиртуальнойМашины));
КонецПроцедуры

// Выполняет остановку виртуальной машины
//
Процедура Остановить() Экспорт
	Лог.Информация(СтрШаблон("Виртуальная машина %1 останавливается", ИмяВиртуальнойМашины));
	Команда = СтрШаблон("yc compute instance stop %1 --no-user-output", ИмяВиртуальнойМашины);
	ИсполнительКоманд.ВыполнитьКоманду(Команда);
	Лог.Информация(СтрШаблон("Виртуальная машина %1 остановлена", ИмяВиртуальнойМашины));
КонецПроцедуры

// Выполняет перезапуск виртуальной машины
//
Процедура Перезапустить() Экспорт
	Лог.Информация(СтрШаблон("Виртуальная машина %1 перезапускается", ИмяВиртуальнойМашины));
	Команда = СтрШаблон("yc compute instance restart %1 --no-user-output", ИмяВиртуальнойМашины);
	ИсполнительКоманд.ВыполнитьКоманду(Команда);
	Лог.Информация(СтрШаблон("Виртуальная машина %1 перезапущена", ИмяВиртуальнойМашины));
КонецПроцедуры

// Возвращает свойства виртуальной машины
//
// Возвращаемое значение:
//   Структура	- Свойства виртуальной машины
//
Функция Свойства(ВывестиСтрокой = Ложь) Экспорт
	Команда = СтрШаблон("yc compute instance get %1 --no-user-output --format json", ИмяВиртуальнойМашины);
	КонтекстВыполнения = ИсполнительКоманд.ВыполнитьКоманду(Команда);
	Если ВывестиСтрокой Тогда
		Возврат(КонтекстВыполнения);
	Иначе
		ПарсерJSON = Новый ПарсерJSON();
		СтруктураПараметров = ПарсерJSON.ПрочитатьJSON(КонтекстВыполнения, , , Истина);
	КонецЕсли;
	Возврат СтруктураПараметров;
КонецФункции

// Возвращает внешний ip адрес виртуальной машины
//
// Возвращаемое значение:
//   Строка	- Внешний IP адрес
//
Функция IPАдресВнешний() Экспорт
	СтруктураПараметров = Свойства();
	Попытка
		ВнешнийIPАдрес = СтруктураПараметров["network_interfaces"][0]["primary_v4_address"]["one_to_one_nat"]["address"];
	Исключение
		ВнешнийIPАдрес = СтруктураПараметров["network_interfaces"][0]["primary_v4_address"]["address"];
	КонецПопытки;
	Возврат ВнешнийIPАдрес;
КонецФункции

// Выполняет удаление виртуальной машины
//
Процедура Удалить() Экспорт
	Лог.Информация(СтрШаблон("Виртуальная машина %1 удаляется", ИмяВиртуальнойМашины));
	Команда = СтрШаблон("yc compute instance delete --name %1 --no-user-output", ИмяВиртуальнойМашины);
	ИсполнительКоманд.ВыполнитьКоманду(Команда);
	Лог.Информация(СтрШаблон("Виртуальная машина %1 удалена", ИмяВиртуальнойМашины));
КонецПроцедуры

Лог = Логирование.ПолучитьЛог("oscript.lib.vporter");
Лог.УстановитьУровень(УровниЛога.Информация);